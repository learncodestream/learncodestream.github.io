<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tasks on Learn Code Stream</title><link>https://learncodestream.github.io/pipelines/tasks/</link><description>Recent content in Tasks on Learn Code Stream</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://learncodestream.github.io/pipelines/tasks/index.xml" rel="self" type="application/rss+xml"/><item><title>Bamboo</title><link>https://learncodestream.github.io/pipelines/tasks/bamboo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/bamboo/</guid><description>The Bamboo task enables you to integrate to an Atlassisan Bamboo endpoint .
You can select the Endpoint , the Bamboo project and the Bamboo plan and run it directly in your pipeline.
Bamboo</description></item><item><title>CI</title><link>https://learncodestream.github.io/pipelines/tasks/ci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/ci/</guid><description>The CI task enables almost any action in your pipeline by pulling a specific Docker image from a registry endpoint, and deploying it to a Docker host configured as an Endpoint. It then executes the CI task script in the context of the running container. It is an incredibly powerful and flexible task type, because the image can have almost any tool or program in it.
The CI task runs using parameters configured in the Pipeline Workspace configuration , including the Container Image, Docker Registry, Docker Host, directory, cache, environment variables and CPU/Memory limits.</description></item><item><title>Condition</title><link>https://learncodestream.github.io/pipelines/tasks/condition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/condition/</guid><description>The Condition Task is very similar to the Precondition setting available for all Tasks, without having an additional task attached to it. It can be used to evaluate the success of previous Stages before moving on with the Pipeline, or to trigger the failure of a pipeline based on a set of conditions. Simple operators can be used to compare Pipeline task output, Variables, Inputs, or any other property that is accessible in the Pipeline.</description></item><item><title>Custom</title><link>https://learncodestream.github.io/pipelines/tasks/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/custom/</guid><description>The Custom Task allows you to use Custom Integrations in Pipeline Stages - for more details please see the Custom Integrations page.
Using a Custom Integration in a Custom Task</description></item><item><title>Jenkins</title><link>https://learncodestream.github.io/pipelines/tasks/jenkins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/jenkins/</guid><description>Jenkins task</description></item><item><title>Kubernetes</title><link>https://learncodestream.github.io/pipelines/tasks/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/kubernetes/</guid><description>The Kubernetes Task allows for interation and execution of Get, Create, Apply, Delete and Rollback actions against a Kubernetes Endpoint . you can use a git endpoint for the yaml manifest definitions. the combination of git endpoints , use of a git triggers and the Kubernetes task allows you to build complex Kubernetes application deployment strategies.
Common across all the Kubernetes actions is are:
Kubernetes Cluster - the Kubernetes endpoint that the task will execute against Timeout - the task timeout while waiting for a response from Kubernetes, this can be useful if, for example, your deployment task needs to download several large container images that may exceed the default timeout, or your deployment has readiness checks that take time to return OK.</description></item><item><title>Pipeline</title><link>https://learncodestream.github.io/pipelines/tasks/pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/pipeline/</guid><description>The Pipeline task allows you to nest existing Pipelines within a parent pipeline, which is really useful for chaining together smaller units of work within a larger parent process. The Pipeline task will automatically generate fields for the Inputs of the nested Pipeline, and the Output parameters will be available to the parent Pipeline as the output properties of the Pipeline task.
The Task configured below will execute a Pipeline called &amp;ldquo;vra-POST&amp;rdquo;, the three Input parameters (vraaccesstoken, vrarequestpayload, vrarequesturi) for the Pipeline have been automatically added to the task and the one output paramter vraResponseJSON has been added to the output parameters.</description></item><item><title>Poll</title><link>https://learncodestream.github.io/pipelines/tasks/poll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/poll/</guid><description>The Poll task is most commonly used in combination with the REST task to Poll for a job completion status, however, it can be used to Poll any HTTP server and wait for a success or failure criteria to be evaluated - or a timeout to expire.
Poll Request URL - this is the URL that the Poll task should poll Count - how many times should the Poll task attempt to access the URL Interval (in seconds) - how long should the Poll task pause between attempts to access Ignore Intermediate Failure - ignore intermediate failures, useful if you&amp;rsquo;re waiting for a service to become available before you can poll it Headers - which headers should be sent with the request (e.</description></item><item><title>PowerShell</title><link>https://learncodestream.github.io/pipelines/tasks/powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/powershell/</guid><description>The PowerShell task allows you to execute PowerShell scripts on a remote PowerShell server using PSRemoting.
Host - FQDN or IP address of the PowerShell host Username - username to access the PowerShell host Password - password to access the PowerShell host Use TLS - enable to connect over TLS Trust self signed certificates - enable to trust self-signed certificates over TLS Script - the PowerShell script to execute Arguments - arguments to the PowerShell script Working Directory - directory in which to execute the script Configure the PowerShell task Output Parameters status userFolder response responseFilePath errorMessage logFilePath exitCode scriptExecutionId completed error logs</description></item><item><title>REST</title><link>https://learncodestream.github.io/pipelines/tasks/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/rest/</guid><description>The REST task is a powerful and adaptable task that lets us interact with any standard REST API - this means we can integrate almost any 3rd party system that has a REST API.
Headers are common accross all the REST action types and allow you to set the HTTP headers to be sent with the API request - often, but not always, these include Content-Type, Accept and Authorization headers - you&amp;rsquo;ll need to a consult your API documentation to see which headers are required.</description></item><item><title>SSH</title><link>https://learncodestream.github.io/pipelines/tasks/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/ssh/</guid><description>The SSH task is similar in many ways to the CI and powershell tasks - it allows you to execute code on a remote machine, in this case over SSH. The task can authenticate with username and password, or a private key.
Host - the IP or FQDN of the SSH host Username - the username to authenticate to the SSH host Passsword - the password to authenticate to the SSH host -or- Private Key and Passphrase - the private key and passphrase for the private key to authenticate to the SSH host Environment variables - can be used to make pipeline variables available to the SSH host script execution, if needed Script - the shell script to execute on the SSH host Arguments - arguments for the shell execution Working Directory - the directory in which to execute the script (defaults to the users home directory, if not specified) An example SSH task configuration To use an SSH key to connect to the SSH host, the key must be a PEM encoded RSA key (it should start with ---begin rsa private key----).</description></item><item><title>User Operation</title><link>https://learncodestream.github.io/pipelines/tasks/user-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/user-operation/</guid><description>User Operations provide a way to include approvals within a Pipeline Execution. The User Operations dashboard provides a view of all Active and Inactive user operations.
Approvers - email addresses of users who can approve or reject the task. You can use the ${requestBy} variable to access the requesting user&amp;rsquo;s ID Approver Groups - (Currently vRA Cloud) email addresses of groups who can approve or reject the task Summary - summary of the approval, used for the subject of the email sent if configured Description - description of the approval task, the body of the email sent if configured Exires after - the time after which the approval task will expire and the pipeline execution will be cancelled Send Email - if enabled, the Email server option can be configured to send the email Cancel pending tasks - if enabled, this will cancel any outstanding previous approvals for this pipeline Email server - the Email Endpoint used to send email notifications User Operations Output Parameters status responderRoles respondedByEmail comments respondedBy index respondedOnInMicros</description></item><item><title>VMware Cloud Template</title><link>https://learncodestream.github.io/pipelines/tasks/cloud-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/cloud-template/</guid><description>The VMWare Cloud Template task can be used to Create, Update, Delete, and Rollback Deployments in vRealize Automation Cloud Assembly.
API token - the only common setting across all actions in this task is the API token. This is an API token with permissions to vRealize Automation Cloud Assembly API to perfom the Action on a Deployment. You can enter the token directly in the field, however you should use a Secret or Restricted variable to avoid the token being visible in pipeline logs.</description></item><item><title>vRealize Orchestrator</title><link>https://learncodestream.github.io/pipelines/tasks/vrealize-orchestrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learncodestream.github.io/pipelines/tasks/vrealize-orchestrator/</guid><description/></item></channel></rss>