[{"id":0,"href":"/Pipelines/stages/","title":"Stages","parent":"Pipelines","content":"Test\n"},{"id":1,"href":"/Pipelines/Tasks/","title":"Tasks","parent":"Pipelines","content":""},{"id":2,"href":"/Getting-Started/","title":"Getting Started","parent":"","content":""},{"id":3,"href":"/Dashboards/","title":"Dashboards","parent":"","content":"Code Stream users can view Dashboards to review historic data for any and all pipelines executions.\nIn addition to the automatically generated default dashboards, Custom Dashboards can be created by developers and administrators to view specific results by adding widgets from the menu to display statistics.\n"},{"id":4,"href":"/Executions/","title":"Executions","parent":"","content":"In Executions, you’ll find a detailed count of every completed or failed pipeline execution.\nWithin each pipeline execution instance, you’ll find detailed information about every step of the pipeline execution, and a means to troubleshoot failed execution attempts.\n"},{"id":5,"href":"/User-Operations/","title":"User Operations","parent":"","content":"To provide more granular management and governance of the DevOps timeline, User Operations can be configured to manage the continuation of the pipeline execution. When a pipeline is configured with an approval task, the pipeline is paused and queued for user interaction. These users can monitor approval tasks here on the User Operations tab.\nUntil a preconfigured user approves or rejects the pipeline task, the pipeline remains stopped. If the required user does not address the User Operation in the time allowed, the pipeline will expire.\n"},{"id":6,"href":"/Pipelines/","title":"Pipelines","parent":"","content":"A Pipeline is the primary mechanism for sequencing all the tasks that need to be performed, and is composed of one or more Stage, with one or more tasks in each stage. When editing a Pipeline there are four tabs to configure:\nWorkspace  The workspace tab configures the environment in which the pipeline runs\n Host specifies a Docker endpoint on which CI tasks and Custom Integrations will execute Builder image URL configures the container image that will be used for CI tasks or Custom Integrations. You can specify using the just an official image (e.g. python), the image and a tag (e.g. python:3.10.0a6-alpine) or a full URL (e.g. projects.registry.vmware.com/antrea/prom-prometheus:v2.19.3) Image Registry selects the Docker Registry endpoint to use to pull the Builder image - if the registry requires credentials to pull an image you can specify them as part of the endpoint and those will be used. Working directory is the directory within a container image that will be used when running commands in a CI task - more often than not, you can leave this blank to default to /build Cache Environment Variables can be used to pass environment variables to a container (similar to the -e VAR_NAME=\u0026quot;value\u0026quot; flag in the docker run command) CPU limit if a CI task requires significant resources, the container\u0026rsquo;s allocated CPU can be increased - it\u0026rsquo;s not often required Memory limit if a CI task requires significant resources, container\u0026rsquo;s allocated Memory can be increased - it\u0026rsquo;s not often required Git clone - if the pipeline is triggered by a Git webhook, CI tasks will automatically clone the Git repository. Note: You will need to configure the pipeline Inputs with the Git auto-inject parameters for this to work!    Input   Model  The Model tab is where you configure the Stages and Tasks of the pipeline - it\u0026rsquo;s where you spend most of your time when creating and editing pipelines.\n A Stage is an encapsulation mechanism for tasks and are used for grouping the individual task execution statuses and results. A Task performs individual actions based on its type and configuration. Tasks can deploy VMware Cloud Templates, and perform actions on configured endpoints, or more generic tasks such as prompting for user interations with User Operation, polling a 3rd party data source with the Poll task, or even perform a REST call.   Output  Outputs can be mapped to values produced by tasks in a pipeline and can be useful when you\u0026rsquo;re nesting pipelines using the Pipeline task to return the results to the parent pipeline.\n  Variables in Pipelines    Most configurable fields within a Pipeline can also use [Variables], references to Input parameters, the output of other tasks or general pipeline properties by using a reference.\nThese can be accessed using by typing $, which will bring up the auto-completion:\n Reference auto-completion  Referring back to previous tasks is done using a heirarchy that matches the structure of the pipeline, for example: ${Build Stage.Build Task.output.exports.variableName} would refer to the value of a variable called variableName that was exported from a task called Build Task in the stage Build Stage.\nTasks return their output as JSON, and it\u0026rsquo;s often useful to look at a previously executed task to find the correct path to an output variable - if you look at the Execution of a Pipeline and examine the task details, you can click \u0026ldquo;View Output JSON\u0026rdquo; and use the \u0026ldquo;Path finder\u0026rdquo; option to discover the correct path: More        Stages    Tasks   Bamboo    CI    Condition   Custom   Kubernetes    Pipeline     Poll    PowerShell   REST   SSH   TFS   User Operation    VMware Cloud Template    vRealize Orchestrator      Reference     Creating and using pipelines in vRealize Automation Code Stream  "},{"id":7,"href":"/Custom-Integrations/","title":"Custom Integrations","parent":"","content":"Custom Integrations\n"},{"id":8,"href":"/Configure/projects/","title":"Projects","parent":"Configure","content":"Projects baby!\n"},{"id":9,"href":"/Configure/Endpoints/","title":"Endpoints","parent":"Configure","content":"Configuring unique and separate Endpoints across multiple platforms and isolated environments allows for the integration, automation, and management of a complete software delivery solution for the entire DevOps timeline from beginning to end.\nEndpoints allow VMware Cloud Services to connect to remote applications and data sources. Code Stream becomes the focal point in the DevOps release process as a single unifying platform integration tool, acting as the glue between established industry standard DevOps toolsets.\n"},{"id":10,"href":"/Configure/variables/","title":"Variables","parent":"Configure","content":"Variables\n"},{"id":11,"href":"/Configure/","title":"Configure","parent":"","content":""},{"id":12,"href":"/Triggers/Gerrit/","title":"Gerrit","parent":"Triggers","content":""},{"id":13,"href":"/Triggers/Git/","title":"Git","parent":"Triggers","content":""},{"id":14,"href":"/Triggers/Docker/","title":"Docker","parent":"Triggers","content":""},{"id":15,"href":"/Triggers/","title":"Triggers","parent":"","content":"Triggers are a way for Code Stream to integrate with Docker, Gerrit, and Git lifecycles. Code Stream connects to the respective endpoint through a Webhook.\nA Webhook is configured by an administrator for a push or pull request event on the Triggers tab. Through the webhook, any code change events on the remote repository are received by the trigger in Code Stream.\nActivity for Docker, Gerrit, and Git triggers and their webhooks can also be observed on the Triggers tab.\n"},{"id":16,"href":"/","title":"","parent":"","content":"What is Code Stream?    Code Stream is a service provided as part of VMware vRealize Automation, either as SaaS through VMware Cloud Services or an on-premises deployment.\nCode Stream is a continuous integration and delivery (CI/CD) release pipeline tool that allows developers to model and automate the entire release process. It incorporates a release dashboard to keep track of all the various release KPIs and acts as the glue between all existing DevOps tools in the release process.\nCode Stream can help teams to deliver software and code changes faster, more reliably and with higher quality while reducing manual operations and operational risk traditionally associated with releases.\nCode Stream provides a customizable dashboards so that DevOps teams can measure their release KPIs and identify bottlenecks or problem areas in the release process.\nCode Stream can be extended using the Custom Integrations feature to interact with almost any 3rd party system that has an API or CLI.\nIf you want to find out more about vRealize Automation you can visit the official product site, view product features, or take a closer look at Code Stream. You can alse explore vRealize Automation Cloud with a free 45-day trial.\n"},{"id":17,"href":"/Configure/Endpoints/bamboo/","title":"Bamboo","parent":"Endpoints","content":"ggg\n"},{"id":18,"href":"/Pipelines/Tasks/bamboo/","title":"Bamboo","parent":"Tasks","content":""},{"id":19,"href":"/categories/","title":"Categories","parent":"","content":""},{"id":20,"href":"/Pipelines/Tasks/ci/","title":"CI","parent":"Tasks","content":"A CI task is one of the most used Task types\n"},{"id":21,"href":"/Pipelines/Tasks/condition/","title":"Condition","parent":"Tasks","content":""},{"id":22,"href":"/Pipelines/Tasks/custom/","title":"Custom","parent":"Tasks","content":""},{"id":23,"href":"/Configure/Endpoints/docker/","title":"Docker","parent":"Endpoints","content":"ggg\n"},{"id":24,"href":"/Configure/Endpoints/dockeregistry/","title":"Docker Registry","parent":"Endpoints","content":"ggg\n"},{"id":25,"href":"/Configure/Endpoints/email/","title":"Email","parent":"Endpoints","content":"ggg\n"},{"id":26,"href":"/Configure/Endpoints/gerrit/","title":"Gerrit","parent":"Endpoints","content":"ggg\n"},{"id":27,"href":"/Configure/Endpoints/git/","title":"Git","parent":"Endpoints","content":"ggg\n"},{"id":28,"href":"/Getting-Started/helloworld/","title":"Hello World","parent":"Getting Started","content":"My first pipeline\n"},{"id":29,"href":"/Configure/Endpoints/jenkins/","title":"Jenkins","parent":"Endpoints","content":"ggg\n"},{"id":30,"href":"/Configure/Endpoints/jira/","title":"Jira","parent":"Endpoints","content":"ggg\n"},{"id":31,"href":"/Configure/Endpoints/kubernetes/","title":"Kubernetes","parent":"Endpoints","content":"ggg\n"},{"id":32,"href":"/Pipelines/Tasks/kubernetes/","title":"Kubernetes","parent":"Tasks","content":""},{"id":33,"href":"/Pipelines/Tasks/pipeline/","title":"Pipeline","parent":"Tasks","content":"Nesting pipelines\u0026hellip;\n"},{"id":34,"href":"/Pipelines/Tasks/poll/","title":"Poll","parent":"Tasks","content":"Poll\n"},{"id":35,"href":"/Pipelines/Tasks/powershell/","title":"PowerShell","parent":"Tasks","content":""},{"id":36,"href":"/Getting-Started/publishing/","title":"Publishing Pipelines","parent":"Getting Started","content":"Code Stream Pipelines can be published to Service Broker with a Custom Form, allowing you to create a much more interactive user experiece.\n"},{"id":37,"href":"/Pipelines/Tasks/rest/","title":"REST","parent":"Tasks","content":""},{"id":38,"href":"/Pipelines/Tasks/ssh/","title":"SSH","parent":"Tasks","content":""},{"id":39,"href":"/tags/","title":"Tags","parent":"","content":""},{"id":40,"href":"/Configure/Endpoints/tfs/","title":"TFS","parent":"Endpoints","content":"ggg\n"},{"id":41,"href":"/Pipelines/Tasks/tfs/","title":"TFS","parent":"Tasks","content":""},{"id":42,"href":"/Pipelines/Tasks/useroperation/","title":"User Operation","parent":"Tasks","content":""},{"id":43,"href":"/Pipelines/Tasks/cloudtemplate/","title":"VMware Cloud Template","parent":"Tasks","content":"Hmmm\n"},{"id":44,"href":"/Pipelines/Tasks/vro/","title":"vRealize Orchestrator","parent":"Tasks","content":""},{"id":45,"href":"/Configure/Endpoints/vro/","title":"vRealize Orchestrator (vRO)","parent":"Endpoints","content":"ggg\n"}]